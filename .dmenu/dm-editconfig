#!/bin/bash
##____  _                      _      
#|  _ \| |__   ___   ___ _ __ (_)_  __
#| |_) | '_ \ / _ \ / _ \ '_ \| \ \/ /
#|  __/| | | | (_) |  __/ | | | |>  < 
#|_|   |_| |_|\___/ \___|_| |_|_/_/\_\
#                                     
# -*- coding: utf-8 -*-
# I don't wanna edit this file that much.
# since its tedious when you get new files and all that
# so I just added some files and directories and basically the script will
# find all files within these directories and let you edit those files
# so you can dynamically update the files without editing this script
# but since it's not very fast to find search the file system using find
# I added a flag -g so when you run the script with that flag it will update the cache
# and then when you run it normally it will open almost instantly.
# and basically since I dont want every single file in my config dir to show.
# I first added my repo in the path and the script will look for all the files I have in my dotfiles repo
# and then change the path to home please keep in mind that the dir structure of your dir repo needs to match,
# your home directory for this to work.

# Imports the configuration
source $HOME/.config/dm-script.conf

# Variables for my git repos
DOTFILES_REPO_PATH="$HOME/myrepos/dotfiles"
DMSCRIPTS_REPO_PATH="$HOME/myrepos/dmscripts"


# Making the array as you can see I dont add that many 
# files/folders cause I don't wanna edit this script that much
declare -A files


# Scripts
files[$HOME/.dmenu]="$DMSCRIPTS_REPO_PATH/.dmenu"
files[$HOME/.scripts]="$DOTFILES_REPO_PATH/.scripts"
files[$HOME/.config]="$DOTFILES_REPO_PATH/.config"
#files[$HOME/.xmonad]="$DOTFILES_REPO_PATH/.xmonad"

# dm script config
files[$HOME/.config/dm-script.conf]="$DMSCRIPTS_REPO_PATH/.config/dm-script.conf"

# zshrc
files[$HOME/.zshrc]="$DOTFILES_REPO_PATH/.zshrc"

# Bashrc
files[$HOME/.bashrc]="$DOTFILES_REPO_PATH/.bashrc"

# Tmux
files[$HOME/.tmux.conf.local]="$DOTFILES_REPO_PATH/.tmux.conf.local"

# etc
files[/etc]="/etc"

while getopts ":g" opt; do
  case $opt in
     g)
      GENERATE=true
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done


if [ "$GENERATE" = "true" ] ; then

for MY_FILES in $(printf '%s\n' "${files[@]}") ; do
        

   if [ -d $MY_FILES ] ; then

       for MY_FILES_LOOP in $(find  $MY_FILES/* -type f 2> /dev/null ) ; do

           SAVE=$(echo "$MY_FILES_LOOP" | sed -e "s|$DOTFILES_REPO_PATH|$HOME|" -e "s|$DMSCRIPTS_REPO_PATH|$HOME|")

           FILES_TO_USE=$(echo "$SAVE" "$FILES_TO_USE")

       done
 
   elif [ -f $MY_FILES ] ; then    

       for MY_FILES_LOOP in $MY_FILES ; do

           SAVE=$(echo "$MY_FILES_LOOP" | sed -e "s|$DOTFILES_REPO_PATH|$HOME|" -e "s|$DMSCRIPTS_REPO_PATH|$HOME|")

           FILES_TO_USE=$(echo "$SAVE" "$FILES_TO_USE")

       done

   fi

done

       [ -z "$FILES_TO_USE" ] || echo "$FILES_TO_USE" | xargs -n1 > $HOME/.config/dm-editconfig-cache

       choice=$(printf '%s\n' "${FILES_TO_USE[@]}" | xargs -n1 | run -p "Edit config file:" )

       [ -z "$choice" ] && exit
   
else

       FILES_TO_USE=$(cat "$HOME/.config/dm-editconfig-cache")


       choice=$(printf '%s\n' "${FILES_TO_USE[@]}" | xargs -n1 | run -p "Edit config file:" )
       
       # Exit if you made no choice
       [ -z "$choice" ] && exit

fi 


exec $GUI_EDITOR $choice







